#!/usr/bin/env python
'''
Build an Amazon Machine Image (AMI) with the latest software using packer.

When the image is built, we need to log it into a file to avoid polluting CZB's
Amazon space with undead EBS snapshots. We make two copies of that, just in case.

The first location is on:

s3://viscrna-seq/development/CI/log_AMIs.json

The backup copy is in

s3://fzanini-bucket/viscrna-seq-backup/log_AMIs.json

The format of the JSON file is the following:


{
  'AMIs':
    [{
      'id': 'dsalkjalsa',
      'timestamp': 2138021983021,
      'git-commit': 'dadsaf332ad',
    },
    {
     ...
    }],
}


Of course this is redundant at the moment, but better safe than sorry.
'''
import os
import sys
import json
import time
import subprocess as sp


class Builder:
    def find_packer(self):
        for packer in ('packer', 'packer-io'):
            try:
                sp.run(packer, check=True)
                break
            except sp.CalledProcessError:
                continue
        else:
            raise IOError('Packer executable not found')
        self.packer = packer

    def validate_config(self):
        sp.run([self.packer, 'validate', 'builder/viscrna-seq.json'],
                check=True)

    def find_existing_ami(self):
        # Check out own log file on S3
        self.get_ami_records()

        # Check whether the EBS snapshot exists (FIXME)
        out = sp.run(
                ['aws', 'ec2', 'describe-snapshots'],
                check=True,
                stdout=sp.PIPE).stdout
        out = json.loads(out)

        # TODO
        ami = ...
        return ami

    def get_ami_records(self):
        out_log = sp.run(
                ['aws', 's3', 'cp',
                 's3://viscrna-seq/development/CI/log_AMIs.json',
                 'log_AMIs.json'],
                check=True,
                stdout=sp.PIPE).stdout
        try:
            with open('log_AMIs.json', 'rt') as f:
                ami_records = json.load(f)['AMIs'][-1]
        finally:
            os.remove('log_AMIs.json')
        return ami_records

    def set_ami_records(self, ami_records):
        try:
            with open('log_AMIs.json', 'rt') as f:
                json.dump(ami_records, f)
            out_log = sp.run(
                    ['aws', 's3', 'cp',
                     'log_AMIs.json',
                     's3://viscrna-seq/development/CI/log_AMIs.json'],
                    check=True,
                    stdout=sp.PIPE).stdout
            out_log = json.loads(out_log)['AMIs'][-1]
        finally:
            os.remove('log_AMIs.json')

    def append_ami_to_records(self, ami_record):
        records = self.get_ami_records()
        records['AMIs'].append(ami_record)
        self.set_ami_records(records)

    def find_ami_ebs(self, ami_id):
        out = sp.run(
                ['aws', 'ec2', 'describe-snapshots'],
                check=True,
                stdout=sp.PIPE).stdout
        di = json.loads(out)
        for snap in di['Snapshots']:
            if 'Description' not in snap:
                continue
            if ami_id in snap['Description']:
                break
        else:
            raise ValueError('EBS volume not found')
        return snap['SnapshotId']

    def deregister_ami(self, ami_id):
        sp.run(['aws', 'ec2', 'deregister-image', '--image-id', ami_id],
               check=True)
        ebs_id = self.find_ami_ebs(ami_id)
        sp.run(['aws', 'ec2', 'delete-snapshot', '--snapshot-id', ebd_id])

    def build_ami(self):
        env = os.environ
        env['PACKER_LOG'] = 'true'

        # FIXME: use tee to split online
        out = sp.run(' '.join([
            packer,
            '-machine-readable',
            'build',
            'builder/viscrna-seq.json',
            ]),
            check=True,
            stdout=sp.PIPE).stdout
        with open('packer.log', 'wt') as f:
            f.write(out)
        print(out)

        # Add the record to the AMI records
        out = out.split('\n')
        for i, line in out:
            if 'The artifacts of successful builds are:' in line:
                break
        else:
            raise IOError('Could not build AMI!')
        ami_id = out[i+3].split(',')[5].split(':')[1]

        # If the AMI does not make it into the records for ANY reasons,
        # we better make triple sure we kill it
        try:
            timestamp = str(time.time())
            git_commit = sp.run(
                    ['git', 'log', '-1', '--format=oneline'],
                    check=True,
                    stdout=sp.PIPE).stdout.split()[0]
            self.append_ami_to_records({
                'id': ami_id,
                'timestamp': timestamp,
                'git-commit': git_commit,
                })
        except:
            self.deregister_ami(ami_id)


if __name__ == '__main__':

    print("PACKER BUILD")
    builder = Buider()

    print('Find packer')
    builder.find_packer()

    print('Validate packer config')
    builder.validate_config()

    print('Build AMI')
    ami_id = builder.build_ami()
    print('New AMI built: {:}'.format(ami_id))
