#!/usr/bin/env python
'''
Append virus sequence and annotations to host transcriptome
'''
import os
import subprocess as sp
import argparse
from Bio import SeqIO


def main(
        virus_gb,
        genome_fasta,
        transcriptome_gtf,
        fdn_output):

    virus_seq = SeqIO.read(virus_gb, 'gb')
    virus_str = str(virus_seq.seq)

    fdn_output = fdn_output.rstrip('/')+'/'
    os.makedirs(fdn_output)

    # Append virus as an additional chromosome
    from Bio.SeqIO.FastaIO import SimpleFastaParser
    with open(genome_fasta, 'rt') as f:
        n_chromosomes = len(SimpleFastaParser(f))
    with open(genome_fasta, 'at') as f:
        f.write('> {:}\n{:}\n'.format(virus_seq.id, virus_str))

    # Make virus gtf
    v_chrom = n_chromosomes + 1
    virus_gtf = []
    for fea in virus_seq.features:
        if fea.type != 'CDS':
            continue

        gene_id = fea.qualifiers['db_xref'][0].split(':')[1]
        strand = '+' if fea.strand > 0 else '-'

        # Gene
        fields = [
                str(v_chrom),
                'genbank',
                'gene',
                str(fea.location.start),
                str(fea.location.end),
                '1',
                strand,
                '0',
                'gene_id "{:}"'.format(gene_id),
                ]
        virus_gtf.append('\t'.join(fields))

        # Transcript
        fields = [
                str(v_chrom),
                'genbank',
                'transcript',
                str(fea.location.start),
                str(fea.location.end),
                '1',
                strand,
                '0',
                'gene_id "{:}"'.format(gene_id),
                ]
        virus_gtf.append('\t'.join(fields))

        # Exons
        for loc in fea.location.parts:
            fields = [
                    str(v_chrom),
                    'genbank',
                    'exon',
                    str(loc.start),
                    str(loc.end),
                    '1',
                    strand,
                    '0',
                    'gene_id "{:}"'.format(gene_id),
                    ]
            virus_gtf.append('\t'.join(fields))

    with open(transcriptome_gtf, 'at') as f:
        for line in virus_gtf:
            f.write(line+'\n')

    # Rehash
    # NOTE: this requires some computing power (8 cores recommended, 32GB RAM)
    pardir = os.path.dirname(fdn_output.rstrip('/'))
    basename = os.path.basename(fdn_output.rstrip('/'))
    os.chdir(pardir)
    sp.run(' '.join([
        'cellranger',
        'mkref',
        '--genome={:}'.format(basename),
        '--fasta={:}'.format(genome_fasta),
        '--genes={:}'.format(transcriptome_gtf),
        ]),
        shell=True,
        check=True)


if __name__ == '__main__':

    pa = argparse.ArgumentParser(description='''Append virus to transcriptome''')
    pa.add_argument(
            '--virus-gb', required=True,
            help='Virus reference GenBank file',
            )
    pa.add_argument(
            '--genome-fasta', required=True,
            help='The host genome fasta file',
            )
    pa.add_argument(
            '--transcriptome-gtf', required=True,
            help='The host transcriptome annotation GTF file',
            )
    pa.add_argument(
            '--output', required=True,
            help='The output folder name',
            )

    args = pa.parse_args()

    print('Regenerating transcriptome hashes')
    main(args.virus_gb,
         args.genome_fasta,
         args.transcriptome_gtf,
         args.output,
         )
